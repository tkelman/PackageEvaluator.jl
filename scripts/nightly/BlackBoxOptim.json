{"gitdate":"2015-09-17 14:46:02 +0200","exit_code":"0","name":"BlackBoxOptim","jlver":"0.4","gitsha":"53f455efbdf4fd1608e8e90bb6488d2408e48275","status":"tests_pass","version":"0.0.1","url":"http://github.com/robertfeldt/BlackBoxOptim.jl","log":">>> 'Pkg.add(\"BlackBoxOptim\")' log\nINFO: Cloning cache of BlackBoxOptim from git://github.com/robertfeldt/BlackBoxOptim.jl.git\nINFO: Installing ArrayViews v0.6.4\nINFO: Installing BlackBoxOptim v0.0.1\nINFO: Installing Distributions v0.8.6\nINFO: Installing FactCheck v0.4.0\nINFO: Installing PDMats v0.3.5\nINFO: Installing StatsBase v0.7.2\nINFO: Installing StatsFuns v0.1.3\nINFO: Package database updated\n\n>>> 'Pkg.test(\"BlackBoxOptim\")' log\nJulia Version 0.4.0-rc2+10\nCommit d8930a0 (2015-09-20 15:38 UTC)\nPlatform Info:\n  System: Linux (x86_64-unknown-linux-gnu)\n  CPU: Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz\n  WORD_SIZE: 64\n  BLAS: libopenblas (USE64BITINT DYNAMIC_ARCH NO_AFFINITY Prescott)\n  LAPACK: libopenblas\n  LIBM: libopenlibm\n  LLVM: libLLVM-3.3\nINFO: Testing BlackBoxOptim\nWARNING: Union(args...) is deprecated, use Union{args...} instead.\n in depwarn at deprecated.jl:73\n in call at deprecated.jl:50\n in include at ./boot.jl:261\n in include_from_node1 at ./loading.jl:304\n in include at ./boot.jl:261\n in include_from_node1 at ./loading.jl:304\n [inlined code] from none:2\n in anonymous at no file:0\n in process_options at ./client.jl:284\n in _start at ./client.jl:411\nwhile loading /home/vagrant/.julia/v0.4/BlackBoxOptim/src/optimization_methods.jl, in expression starting on line 2\nWARNING: Base.String is deprecated, use AbstractString instead.\nWARNING: Base.String is deprecated, use AbstractString instead.\nLatin hypercube sampling\n15 facts verified.\nAssign ranks within tolerance\n  > Ranks correctly if none are within tolerance of each other\n  > Ranks correctly if some are within tolerance of each other\n  > Ranks correctly if all are within tolerance of each other\n  > Ranks in reverse if none are within tolerance of each other\n  > Ranks correctly for a complex example testing many aspects\n25 facts verified.\nDictChain\n  > Matching keys and type parameters\n  > merging and chaining\n    > incompatible dictionary types\n    > using constructor\n    > using merge()\n    > using merge!()\n    > using chain()\n  > converting to Dict\n  > show()\nBlackBoxOptim.DictChain{Symbol,Int64}[Dict(:a=>1),Dict(:a=>2,:b=>4),Dict(:a=>3,:b=>5)]\n  > flatten\n35 facts verified.\nParameters\n  > When no parameters or key type doesn't match\n  > With one parameter in one set\n  > With parameters in multiple sets\n  > Updating parameters after construction\n  > Constructing from another parameters object\n  > Get key without default\n  > Get key with default\n  > Merge with Parameters or Dict\n28 facts verified.\nFitness\n  > hat_compare floats\n  > is_minimizing in ScalarFitness schemes\n  > hat_compare floats in a minimizing fitness scheme\n  > hat_compare floats in a maximizing fitness scheme\n  > hat_compare fitnesses of size 1 in a minimizing FitnessScheme\n  > hat_compare fitnesses of size 1 in a maximizing FitnessScheme\n  > hat_compare fitnesses of size > 1 in a minimizing FitnessScheme\n  > hat_compare fitnesses of size > 1 in a minimizing FitnessScheme\n  > is_better/is_worse/same_fitness in a minimizing FitnessScheme\n  > is_better/is_worse/same_fitness in a maximizing FitnessScheme\n  > fitness_scheme(x, y)\n87 facts verified.\nPopulation\n  > FitPopulation\n    > candidates pool\n    > append!()\n21 facts verified.\nBimodal Cauchy Distributions\n  > sample bimodal cauchy with truncation on one side\n  > sample bimodal cauchy with truncation on both sides\n400 facts verified.\nSearch space\n  > in()\n  > Symmetric search space with default range\n  > SymmetricSearchSpace with given range\n  > rand_individual is within the search space\n  > rand_individuals creates many individuals and all are within the search space\n  > rand_individuals correctly handles column-wise generation in assymetric search spaces\n  > RangePerDimSearchSpace\n  > rand_individuals_lhs samples in LHS intervals\n  > feasible finds feasible points in the search space\n  > diameters\n8977 facts verified.\nMutation operators\n  > SimpleGibbsMutation\n  > MutationClock\n  > FixedGeneticOperatorsMixture\n  > FAGeneticOperatorsMixture\n22615 facts verified.\nFrequency Adaptation\n  > returns all indices once in the first block\n  > increases the frequency of a method that has higher progress values\n1222 facts verified.\nTopListArchive\n  > ArchivedIndividual\n  > Constructing a small archive and adding to it\n  > magnitude_class for positive fitness values\n  > magnitude_class for negative fitness values\n  > archive copies the individuals\n  > for maximizing fitness\n98 facts verified.\nRandom search\n  > ask()\n900 facts verified.\nDifferential evolution optimizer\n  > SimpleSelector\n  > RadiusLimitedSelector\n  > RandomBound\n    > does nothing if within bounds\n    > bounds if lower than min bound\n    > bounds if higher than max bound\n  > DiffEvoRandBin1\n    > always copies from donor if length is 1\n    > always copies at least one element from donor\n    > unlikely to copy everything if vectors are large\n    > correctly modifies the parameters vector\n  > ask()/tell!()\n2030 facts verified.\nAdaptive differential evolution optimizer\n  > parameters adjust!()\n  > ask()\n1000 facts verified.\nsNES\n  > assign_weights!()\n    > when indices are already ordered\n    > when indices are not ordered\n35 facts verified.\nTop-level interface\n  > run a simple optimization\n    > using bboptimize() with mostly defaults\n    > using bbsetup()/bboptimize() with mostly defaults\n    > using non-population optimizer\n    > using population optimizer\n  > continue running an optimization after it finished\n  > continue running an optimization after serializing to disc\n46 facts verified.\nbboptimize smoketest\n  > testing resampling_memetic_search method to ensure it works\n  > testing de_rand_2_bin_radiuslimited method to ensure it works\n  > testing de_rand_2_bin method to ensure it works\n  > testing de_rand_1_bin_radiuslimited method to ensure it works\n  > testing adaptive_de_rand_1_bin_radiuslimited method to ensure it works\n  > testing adaptive_de_rand_1_bin method to ensure it works\n  > testing separable_nes method to ensure it works\n  > testing dxnes method to ensure it works\n  > testing simultaneous_perturbation_stochastic_approximation method to ensure it works\n  > testing de_rand_1_bin method to ensure it works\n  > testing generating_set_search method to ensure it works\n  > testing resampling_inheritance_memetic_search method to ensure it works\n  > testing xnes method to ensure it works\n  > testing probabilistic_descent method to ensure it works\n  > testing random_search method to ensure it works\n45 facts verified.\nSingle objective functions\n  > Sphere\n  > Schwefel2.22\n  > Schwefel1.2\n  > Schwefel2.21\n  > Rosenbrock\n32 facts verified.\nGenerating set search\n2 facts verified.\nRandom sampling on unit, n-dimensional sphere\n812 facts verified.\nRandom direction generator\n2 facts verified.\nMirrored random direction generator\n10 facts verified.\nINFO: BlackBoxOptim tests passed\n\n>>> End of log","licfile":"LICENSE.md","license":"MIT"}